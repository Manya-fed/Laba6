#5. Обработать результаты первенства по футболу. Результаты каж-
#дой игры заданы в виде названий команд и счета (количество забитых

#и пропущенных мячей). Сформировать таблицу очков (выигрыш – 3,

#178
#ничья – 1, проигрыш – 0) и упорядочить результаты в соответствии с

#занятым местом. Если сумма очков у двух команд одинакова, то срав-
#ниваются разности забитых и пропущенных мячей. Вывести резуль-
#тирующую таблицу, содержащую место, название команды, количе-
#ство очков.


class Team:
    def __init__(self, name):
        self.name = name
        self.points = 0
        self.goals_for = 0
        self.goals_against = 0

    def add_result(self, goals_for, goals_against):
        self.goals_for += goals_for
        self.goals_against += goals_against
        if goals_for > goals_against:
            self.points += 3
        elif goals_for == goals_against:
            self.points += 1

    def goal_difference(self):
        return self.goals_for - self.goals_against

    def __repr__(self):
        return f"{self.name} (Очки: {self.points}, Разница: {self.goal_difference()})"

class LeagueTable:
    def __init__(self):
        self.teams = {}

    def add_match_result(self, team1_name, team1_goals_for, team1_goals_against, team2_name, team2_goals_for,
                         team2_goals_against):
        if team1_name not in self.teams:
            self.teams[team1_name] = Team(team1_name)
        if team2_name not in self.teams:
            self.teams[team2_name] = Team(team2_name)
        self.teams[team1_name].add_result(team1_goals_for, team1_goals_against)
        self.teams[team2_name].add_result(team2_goals_for, team2_goals_against)
    def get_sorted_table(self):
        teams_list = list(self.teams.values())
        n = len(teams_list)
        for i in range(n):
            for j in range(0, n - i - 1):
                if teams_list[j].points < teams_list[j + 1].points or (teams_list[j].points == teams_list[j + 1].points and teams_list[j].goal_difference() < teams_list[j + 1].goal_difference()):
                    teams_list[j], teams_list[j + 1] = teams_list[j + 1], teams_list[j]
        return teams_list

    def display_table(self):
        sorted_teams = self.get_sorted_table()
        print("Таблица очков:")
        print("Место | Команда              | Очки | Разница")
        print("-" * 40)
        for index, team in enumerate(sorted_teams, start=1):
            print(f"{index:<5} | {team.name:<20} | {team.points:<4} | {team.goal_difference()}")

def main():
    league_table = LeagueTable()
    match_results = [
        ("TeamA", 2, 1, "TeamB", 1, 1),
        ("TeamC", 0, 3, "TeamA", 3, 0),
        ("TeamB", 2, 2, "TeamC", 2, 1),
    ]
    print("Исходные результаты матчей:")
    for result in match_results:
        team1_name, team1_goals_for, team1_goals_against, team2_name, team2_goals_for, team2_goals_against = result
        print(f"{team1_name} {team1_goals_for}:{team1_goals_against} {team2_name} {team2_goals_for}:{team2_goals_against}")
        league_table.add_match_result(team1_name, team1_goals_for, team1_goals_against, team2_name, team2_goals_for,
                                      team2_goals_against)
    league_table.display_table()
if __name__ == "__main__":
    main()

    
